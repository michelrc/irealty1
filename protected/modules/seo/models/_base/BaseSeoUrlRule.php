<?php

/**
 * This is the model base class for the table "url_rule".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "UrlRule".
 *
 * Columns in table "url_rule" available as properties of the model,
 * and there are no model relations.
 *
 * @property integer $id
 * @property string $route
 * @property integer $caseSensitive
 * @property string $pattern
 * @property string $str_params
 * @property string $urlSuffix
 * @property string $defaultParams
 * @property integer $matchValue
 * @property string $verb
 * @property integer $parsingOnly
 * @property string $references
 * @property string $routePattern
 * @property string $template
 * @property integer $append
 * @property integer $hasHostInfo
 * @property integer $order
 * @property mixed $modelClassName
 * @property mixed $primaryKeyParam
 *
 */
abstract class BaseSeoUrlRule extends GxActiveRecord
{
    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }

    public static function label($n = 1)
    {
        return Yii::t('SeoUrlRule', 'UrlRule|UrlRules', $n);
    }

    public static function representingColumn()
    {
        return 'route';
    }

    /**
     * Behaviors.
     * @return array
     */
    function behaviors()
    {
        return CMap::mergeArray(parent::behaviors(), array(
            /*'order' => array(
                'class' => 'ycm.behaviors.OrderBehavior',
                'attr' => 'order',
            )*/
            'seo' => array(
                'class' => 'application.modules.seo.components.SeoModelBehavior',
            ),
        ));
    }

    public function tableName()
    {
        return 'seo_url_rule';
    }

    public function validateRoute()
    {
        /** @var CController $ca */
        if (!(($ca = app()->createController($this->route)) !== null)) {
            $this->addError('route', Yii::t('admin', 'The given route is invalid. (invalid controller)'));
        } else {
            list($controller, $actionID) = $ca;
            if (!(($action = $controller->createAction($actionID)) !== null)) {
                $this->addError('route', Yii::t('admin', 'The given route is invalid. (invalid action)'));
            }
        }
    }

    public function rules()
    {
        return array(
            array('order', 'numerical', 'integerOnly' => true),
            array('isModelRule, caseSensitive, matchValue, parsingOnly, append, hasHostInfo', 'boolean'),
            array('route, routePattern, template', 'length', 'max' => 1023),
            array('route', 'validateRoute'),
            array('urlSuffix, verb', 'length', 'max' => 255),
            array('modelClassName, primaryKeyParam', 'length', 'max' => 255),

            array('str_params, defaultParams, references', 'safe'),
            array('route, str_params, urlSuffix, defaultParams, verb, references, routePattern, template, order', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, route, caseSensitive, str_params, urlSuffix, defaultParams, matchValue, verb, parsingOnly, references, routePattern, template, append, hasHostInfo, order, modelClassName, primaryKeyParam', 'safe', 'on' => 'search'),
        );
    }


    public function pivotModels()
    {
        return array();
    }

    public function attributeLabels()
    {
        return array(
            'id' => Yii::t('SeoUrlRule', 'ID'),
            'caseSensitive' => Yii::t('SeoUrlRule', 'Case Sensitive'),
            'route' => Yii::t('SeoUrlRule', 'Route'),
            'str_params' => Yii::t('SeoUrlRule', 'Params'),
            'urlSuffix' => Yii::t('SeoUrlRule', 'URL Suffix'),
            'defaultParams' => Yii::t('SeoUrlRule', 'Default Params'),
            'matchValue' => Yii::t('SeoUrlRule', 'Match Value'),
            'verb' => Yii::t('SeoUrlRule', 'Verb'),
            'parsingOnly' => Yii::t('SeoUrlRule', 'Parse Only'),
            'references' => Yii::t('SeoUrlRule', 'References'),
            'routePattern' => Yii::t('SeoUrlRule', 'Route Pattern'),
            'template' => Yii::t('SeoUrlRule', 'Template'),
            'append' => Yii::t('SeoUrlRule', 'Append'),
            'hasHostInfo' => Yii::t('SeoUrlRule', 'Has Host Info'),
            'modelClassName' => Yii::t('SeoUrlRule', 'Model Class Name'),
            'primaryKeyParam' => Yii::t('SeoUrlRule', 'Primary Key Param'),
            'isModelRule' => Yii::t('SeoUrlRule', 'Is model rule'),

        );
    }

    public function search()
    {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id);
        $criteria->compare('route', $this->route, true);
        $criteria->compare('caseSensitive', $this->caseSensitive);
        $criteria->compare('str_params', $this->str_params, true);
        $criteria->compare('urlSuffix', $this->urlSuffix, true);
        $criteria->compare('defaultParams', $this->defaultParams, true);
        $criteria->compare('matchValue', $this->matchValue);
        $criteria->compare('verb', $this->verb, true);
        $criteria->compare('parsingOnly', $this->parsingOnly);
        $criteria->compare('references', $this->references, true);
        $criteria->compare('routePattern', $this->routePattern, true);
        $criteria->compare('template', $this->template, true);
        $criteria->compare('append', $this->append);
        $criteria->compare('hasHostInfo', $this->hasHostInfo);
        $criteria->compare('order', $this->order);
        $criteria->compare('modelClassName', $this->modelClassName);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
            'sort' => array(
                'defaultOrder' => 't.order',
            ),
        ));
    }
}