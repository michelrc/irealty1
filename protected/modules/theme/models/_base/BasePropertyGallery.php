<?php

/**
 * This is the model base class for the table "property_gallery".
 * It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PropertyGallery".
 * This code was improve iReevo Team
 * Columns in table "property_gallery" available as properties of the model,
 * followed by relations of table "property_gallery" available as properties of the model.
 *
 * @property string $id
 * @property string $image
 * @property string $property
 * @property integer $main
 *
 * @property Property $property0
 * @property Date2TimeBehavior $date2time
 * @property CurrencyBehavior $currency
 * @property ImageARBehavior $imageAR

 */
abstract class BasePropertyGallery extends I18NInTableAdapter {
// many to many relationship
            public $Property;
    
/* si tiene una imagen pa subir con ImageARBehavior, descomente la linea siguiente
// public $recipeImg;

    /**
    * Behaviors.
    * @return array
    */
    public $recipeImg1;
    function behaviors() {
        return CMap::mergeArray(parent::behaviors(), array(
                

                                '_image' => array(
                    'class' => 'ImageARBehavior',
                    'attribute' => 'recipeImg1', // this must exist
                    'extension' => 'jpg,gif,png', // possible extensions, comma separated
                    'prefix' => 'img1_',
                    'relativeWebRootFolder' => '/images/PropertyGallery',
                    'formats' => array(
                    // create a thumbnail for used in the view datails
                    'thumb' => array(
                    'suffix' => '_thumb',
                    'process' => array('resize' => array(50, 50)),
                    ),
                    'normal' => array(
                    'suffix' => '_normal',

                                        'process' => array('resize' => array(728,486, 1)),
                                        ),
                    // and override the default :
                    ),

                    'defaultName' => 'default', // when no file is associated, this one is used
                            // defaultName need to exist in the relativeWebRootFolder path, and prefixed by prefix,
                            // and with one of the possible extensions. if multiple formats are used, a default file must exist
                            // for each format. Name is constructed like this :
                            //     {prefix}{name of the default file}{suffix}{one of the extension}
                ),
                

                                'files' => array(
                     'class'=>'application.modules.ycm.behaviors.FileBehavior',
                ),
                'date2time' => array(
                    'class' => 'ycm.behaviors.Date2TimeBehavior',
                    'attributes'=>'',
                    'format'=>'Y-m-d',
                ),
                'datetime2time' => array(
                    'class' => 'ycm.behaviors.Date2TimeBehavior',
                    'attributes'=>'',
                    'format'=>'Y-m-d H:i:s',
                ),
                'currency' => array(
                    'class' => 'ycm.behaviors.CurrencyBehavior',
                    'attributes'=>'',
                ),
                            ));
    }


	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'property_gallery';
	}

	public static function label($n = 1) {
		return self::model()->t_model('PropertyGallery|PropertyGalleries', $n);
	}

	public static function representingColumn() {
		return array(
			'image',
		);
	}

    public function i18nAttributes() {
        return array(
        );
    }

	public function rules() {
		return array(
			array('id, property', 'required'),
			array('main', 'boolean'),
			array('id, property', 'length', 'max'=>50),
			array('image', 'length', 'max'=>255),
			array('image, main', 'default', 'setOnEmpty' => true, 'value' => null),

/* descomente las lineas siguientes si quiere subir una image con ImageARBehavior*/
    array('recipeImg1', 'file', 'on'=>'insert', 'allowEmpty'=>true, 'types'=>'jpg,jpeg,gif,png,JPG,GIF,JPEG,PNG', 'maxSize'=>1024*1024*6),
array('recipeImg1', 'file', 'on'=>'update', 'allowEmpty'=>true, 'types'=>'jpg,jpeg,gif,png,JPG,GIF,JPEG,PNG', 'maxSize'=>1024*1024*6),
array('recipeImg1', 'safe'),


			array('id, image, property, main', 'safe', 'on'=>'search'),
            array('Property', 'safe'),
		);
	}

	public function relations() {
		return array(
			'property0' => array(self::BELONGS_TO, 'Property', 'property'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => $this->t_label('ID'),
			'image' => $this->t_label('Image Alt'),
			'property' => $this->t_label('Property'),
			'main' => $this->t_label('Main image'),
			    'recipeImg1' => $this->t_label('Image'),

		);
	}

	public function search() {
        $criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('image', $this->image, true);
		$criteria->compare('property', $this->property);
		$criteria->compare('main', $this->main);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
            		));
	}
}