<?php

/**
 * This is the model base class for the table "property".
 * It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Property".
 * This code was improve iReevo Team
 * Columns in table "property" available as properties of the model,
 * followed by relations of table "property" available as properties of the model.
 *
 * @property string $id
 * @property string $banner_image
 * @property string $banner_title
 * @property string $name
 * @property string $category
 * @property string $description
 * @property double $price
 * @property string $condition
 * @property string $address
 * @property string $province
 * @property double $area
 * @property integer $rooms
 * @property integer $bathroom
 * @property string $best_tips
 * @property string $agent
 * @property string $type
 * @property integer $exalted
 * @property string $youtube_video
 * @property double $map_longitude
 * @property double $map_latitude
 * @property string $created
 * @property integer $number_contact
 * @property integer $listing_image
 *
 * @property Agent $agent0
 * @property PropertyCategory $category0
 * @property PropertyCondition $condition0
 * @property Province $province0
 * @property PropertyType $type0
 * @property PropertyAmenitie[] $propertyAmenities
 * @property PropertyGallery[] $propertyGalleries
 * @property Date2TimeBehavior $date2time
 * @property CurrencyBehavior $currency
 * @property ImageARBehavior $imageAR

 */
abstract class BaseProperty extends I18NInTableAdapter {
// many to many relationship
            public $Agent;
            public $PropertyCategory;
            public $PropertyCondition;
            public $Province;
            public $PropertyType;
            public $PropertyAmenitie;
            public $PropertyGallery;
    
/* si tiene una imagen pa subir con ImageARBehavior, descomente la linea siguiente
// public $recipeImg;

    /**
    * Behaviors.
    * @return array
    */
    public $recipeImg1;
    public $recipeImg2;
    function behaviors() {
        return CMap::mergeArray(parent::behaviors(), array(
            'seo' => array(
                            'class' => 'seo.components.SeoModelBehavior',
                        ),
                

                                '_banner_image' => array(
                    'class' => 'ImageARBehavior',
                    'attribute' => 'recipeImg1', // this must exist
                    'extension' => 'jpg,gif,png', // possible extensions, comma separated
                    'prefix' => 'img1_',
                    'relativeWebRootFolder' => '/images/Property',
                    'formats' => array(
                    // create a thumbnail for used in the view datails
                    'thumb' => array(
                    'suffix' => '_thumb',
                    'process' => array('resize' => array(50, 50)),
                    ),
                    'normal' => array(
                    'suffix' => '_normal',

                                        'process' => array('resize' => array(1263,298, 1)),
                                        ),
                    // and override the default :
                    ),

                    'defaultName' => 'default', // when no file is associated, this one is used
                            // defaultName need to exist in the relativeWebRootFolder path, and prefixed by prefix,
                            // and with one of the possible extensions. if multiple formats are used, a default file must exist
                            // for each format. Name is constructed like this :
                            //     {prefix}{name of the default file}{suffix}{one of the extension}
                ),
                '_listing_image' => array(
                                'class' => 'ImageARBehavior',
                                'attribute' => 'recipeImg2', // this must exist
                                'extension' => 'jpg,gif,png', // possible extensions, comma separated
                                'prefix' => 'img2_',
                                'relativeWebRootFolder' => '/images/Property',
                                'formats' => array(
                                // create a thumbnail for used in the view datails
                                'thumb' => array(
                                'suffix' => '_thumb',
                                'process' => array('resize' => array(50, 50)),
                                ),
                                'normal' => array(
                                'suffix' => '_normal',

                                                    'process' => array('resize' => array(379,275, 1)),
                                                    ),
                                // and override the default :
                                ),

                                'defaultName' => 'default', // when no file is associated, this one is used
                                        // defaultName need to exist in the relativeWebRootFolder path, and prefixed by prefix,
                                        // and with one of the possible extensions. if multiple formats are used, a default file must exist
                                        // for each format. Name is constructed like this :
                                        //     {prefix}{name of the default file}{suffix}{one of the extension}
                            ),
                

                                'files' => array(
                     'class'=>'application.modules.ycm.behaviors.FileBehavior',
                ),
                'date2time' => array(
                    'class' => 'ycm.behaviors.Date2TimeBehavior',
                    'attributes'=>'',
                    'format'=>'Y-m-d',
                ),
                'datetime2time' => array(
                    'class' => 'ycm.behaviors.Date2TimeBehavior',
                    'attributes'=>'',
                    'format'=>'Y-m-d H:i:s',
                ),
                'currency' => array(
                    'class' => 'ycm.behaviors.CurrencyBehavior',
                    'attributes'=>'price,area',
                ),
                            ));
    }


	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'property';
	}

	public static function label($n = 1) {
		return self::model()->t_model('Property|Properties', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

    public function i18nAttributes() {
        return array(
        'banner_title', 'name', 'description', 'address', 'best_tips');
    }

	public function rules() {
		return array(
			array('id, banner_title, name, description, price, address, area, map_longitude, map_latitude', 'required'),
			array('rooms, bathroom, number_contact', 'numerical', 'integerOnly'=>true),
			array('exalted', 'boolean'),
			array('price, area', 'numerical', 'numberPattern' => "/{$this->currency->pathern}/"),
			array('id, category, condition, province, agent, type', 'length', 'max'=>50),
			array('banner_image, banner_title, name, address, best_tips, youtube_video', 'length', 'max'=>255),
			array('created', 'safe'),
			array('banner_image, category, condition, province, rooms, bathroom, best_tips, agent, type, exalted, youtube_video, created, number_contact', 'default', 'setOnEmpty' => true, 'value' => null),
			array('banner_title, name, description, address, best_tips', 'i18n.validators.I18NValidator', 'validate' => 'required'),

/* descomente las lineas siguientes si quiere subir una image con ImageARBehavior*/
    array('recipeImg1', 'file', 'on'=>'insert', 'allowEmpty'=>true, 'types'=>'jpg,jpeg,gif,png,JPG,GIF,JPEG,PNG', 'maxSize'=>1024*1024*6),
array('recipeImg1', 'file', 'on'=>'update', 'allowEmpty'=>true, 'types'=>'jpg,jpeg,gif,png,JPG,GIF,JPEG,PNG', 'maxSize'=>1024*1024*6),
array('recipeImg1', 'safe'),
            array('recipeImg2', 'file', 'on'=>'insert', 'allowEmpty'=>true, 'types'=>'jpg,jpeg,gif,png,JPG,GIF,JPEG,PNG', 'maxSize'=>1024*1024*6),
array('recipeImg2', 'file', 'on'=>'update', 'allowEmpty'=>true, 'types'=>'jpg,jpeg,gif,png,JPG,GIF,JPEG,PNG', 'maxSize'=>1024*1024*6),
array('recipeImg2', 'safe'),


			array('id, banner_image, banner_title, name, category, description, price, condition, address, province, area, rooms, bathroom, best_tips, agent, type, exalted, youtube_video, map_longitude, map_latitude, created, number_contact', 'safe', 'on'=>'search'),
            array('Agent, PropertyCategory, PropertyCondition, Province, PropertyType, PropertyAmenitie, PropertyGallery', 'safe'),
		);
	}

	public function relations() {
		return array(
			'agent0' => array(self::BELONGS_TO, 'Agent', 'agent'),
			'category0' => array(self::BELONGS_TO, 'PropertyCategory', 'category'),
			'condition0' => array(self::BELONGS_TO, 'PropertyCondition', 'condition'),
			'province0' => array(self::BELONGS_TO, 'Province', 'province'),
			'type0' => array(self::BELONGS_TO, 'PropertyType', 'type'),
			'propertyAmenities' => array(self::HAS_MANY, 'PropertyAmenitie', 'property_id'),
			'propertyGalleries' => array(self::HAS_MANY, 'PropertyGallery', 'property'),
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => $this->t_label('ID'),
			'banner_image' => $this->t_label('Banner image Alt'),
			'banner_title' => $this->t_label('Banner title'),
			'name' => $this->t_label('Property name'),
			'category' => $this->t_label('Category name'),
			'description' => $this->t_label('Description'),
			'price' => $this->t_label('Price'),
			'condition' => $this->t_label('Condition'),
			'address' => $this->t_label('Address'),
			'province' => $this->t_label('Province/Town'),
			'area' => $this->t_label('Area'),
			'rooms' => $this->t_label('Rooms'),
			'bathroom' => $this->t_label('Bathrooms'),
			'best_tips' => $this->t_label('Best tips'),
			'agent' => $this->t_label('Agent'),
			'type' => $this->t_label('Type'),
			'exalted' => $this->t_label('Exalted'),
			'youtube_video' => $this->t_label('Youtube video'),
			'map_longitude' => $this->t_label('Longitude'),
			'map_latitude' => $this->t_label('Latitude'),
			'created' => $this->t_label('Created'),
			'number_contact' => $this->t_label('Number Contact'),

            'recipeImg1' => $this->t_label('Banner image'),
            'recipeImg2' => $this->t_label('Imagen para listados')
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('banner_image', $this->banner_image, true);
		$criteria->compare('banner_title', $this->banner_title, true);
		$criteria->compare('name_'.app()->language, $this->name, true);
		$criteria->compare('category', $this->category);
		$criteria->compare('description_'.app()->language, $this->description, true);
		$criteria->compare('price', $this->price, true);
		$criteria->compare('condition', $this->condition);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('province', $this->province);
		$criteria->compare('area', $this->area);
		$criteria->compare('rooms', $this->rooms);
		$criteria->compare('bathroom', $this->bathroom);
		$criteria->compare('best_tips', $this->best_tips, true);
		$criteria->compare('agent', $this->agent);
		$criteria->compare('type', $this->type);
		$criteria->compare('exalted', $this->exalted);
		$criteria->compare('youtube_video', $this->youtube_video, true);
		$criteria->compare('map_longitude', $this->map_longitude);
		$criteria->compare('map_latitude', $this->map_latitude);
		$criteria->compare('created', $this->created, true);
		$criteria->compare('number_contact', $this->number_contact);
        $criteria->order = 'created desc';

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
            		));
	}
}