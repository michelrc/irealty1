<?php

/**
 * This is the model base class for the table "i18n_language".
 * It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Language".
 * This code was improve iReevo Team
 * Columns in table "i18n_language" available as properties of the model,
 * followed by relations of table "i18n_language" available as properties of the model.
 *
 * @property string $id
 * @property string $name
 * @property integer $enable
 * @property integer $isDefault
 *
 * @property I18nSource[] $i18nSources
 * @property ImageARBehavior $imageAR
 */
abstract class BaseLanguage extends GxActiveRecord
{
// many to many relationship
    public $I18nSource;

    /**
     * Behaviors.
     * @return array
     */
    function behaviors()
    {
        return CMap::mergeArray(parent::behaviors(), array(

        ));
    }


    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }

    public function tableName()
    {
        return 'i18n_language';
    }

    public static function label($n = 1)
    {
        return self::model()->t_model('Language|Languages', $n);
    }

    public static function representingColumn()
    {
        return 'id';
    }

    public function rules()
    {
        return array(
            array('id', 'required'),
            array('enable, isDefault', 'numerical', 'integerOnly' => true),
            array('id', 'length', 'max' => 10),
            array('name', 'length', 'max' => 100),
            array('name, enable, isDefault', 'default', 'setOnEmpty' => true, 'value' => null),
            array('id, name, enable, isDefault', 'safe', 'on' => 'search'),
            array('I18nSource', 'safe'),
        );
    }

    public function relations()
    {
        return array(
            'sources' => array(self::MANY_MANY, 'I18nSource', 'i18n_message(language, id)'),
        );
    }

    public function pivotModels()
    {
        return array(
            'sources' => 'I18nMessage',
        );
    }

    public function attributeLabels()
    {
        return array(
            'id' => Yii::t('i18n','ID'),
            'name' => Yii::t('i18n','Name'),
            'enable' => Yii::t('i18n','Enable'),
            'isDefault' => Yii::t('i18n','Is Default'),
        );
    }

    public function search()
    {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id, true);
        $criteria->compare('name', $this->name, true);
        $criteria->compare('enable', $this->enable);
        $criteria->compare('isDefault', $this->isDefault);

        return new CActiveDataProvider($this, array(
            'criteria' => $criteria,
        ));
    }
}